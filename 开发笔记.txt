1.安装相关环境
	node >=8.9.0 ==8.9.4,
	mysql >=5.7.20 ==5.7.21,
	mysql-workbench >=6.3 ==6.3.10,
	webstorm 2017.1 ==2017.2.2
	
2.webstorm 打开一个空文件夹G:\doudizhumayun\trunk，会自动开始建立空项目的
	2.1在项目G:\doudizhumayun\trunk右键新建一个路径，命名为ddz-server，点击界面左下角的terminal切换到
		命令行，在命令行中进入ddz-server，运行npm init 跟着提示走，包名版本默认，描述输入一些，
		入口文件输入main.js即可，测试命令 输入 node app.js ，git路径、关键词、作者默认空，
		授权默认ISC即可完成创建package.json配置文件；
	2.2在ddz-server下新建js文件app.js文件，需要预安装依赖库，命令行执行
		npm install socket.io --save
	2.3在app.js文件中开始实现服务端的启动功能，https://socket.io/docs/可以找到相关api，node app.js可以启动app脚本的，
	    在server下的package.json文件中，scripts中新增一条"start":"node app.js"，则在命令行中执行node app.js 和npm start
	    的效果相同，
3.在creator中新建一个空白项目，路径跟服务端保持一致，对准路径为G:\doudizhumayun\trunk\doudizhu-client\assets\..
    3.1在资源管理器中先新建几个目录：scenes(先保存当前场景为mainScene.fire文件)、scripts(新建一个mainScenes的js文件)、
        resources、prefabs，
    3.2选中canvas，右边界面会出现属性检查器，拖动界面中的mainScenes.js文件到canvas的属性检查器，就可以添加并绑定组件了
        在资源管理器中scripts文件夹中新建几个目录：gameScene lib mainScene,并把mainScene拖放到mainScene文件夹，将服务端
        node_modules\socket.io-client\dist\socket.io.js文件拖放到lib文件夹中，（此时会报错，修复：双击lib\socket.io,
        界面右边，勾选‘导入为插件’，接着点击右上角的绿色√按钮应用，然后点击控制台窗口中的红色清空按钮，即可取消报错）
4.编辑doudizhu-client\assets\scripts\mainScene\mainScene.js文件，修改代码。

5.在creator中层级管理器中canvas创建一个ui-按钮节点，mainsence脚本里面新增代码，重命名按钮节点为 wxLogin，选中按钮，
到属性检查器中修改click events的数量为1，将canvas节点拖动到[0]后面的节点框，右边为mainscenes和buttonclick，
    5.1在G:\doudizhumayun\trunk\doudizhu-client\assets\scripts下新建全局脚本：global.js文件，global 是一个对象,在mainscene.js脚本
    中添加导入代码，
    5.2在scripts目录中新建一个data文件夹专门用处理数据，并在其中新建一个socket-controller.js脚本，输入相应代码，在需要
    处理wxlogin时，在data目录中新建一个player-data.js文件，

6.在G:\doudizhumayun\trunk\ddz-server\下新建一个js脚本：db.js,在G:\doudizhumayun\trunk\ddz-server\下新建一个config.json，
    6.1打开mysqlworkbench,新建一个连接：连接名称用斗地主，链连接方式选TCP/IP，hostname和端口号是127.0.0.1 3306，用户名
    是root，密码自己设置，测试链连接，别忘了事先在cmd执行mysql的安装命令：
    mysqld.exe --install MySql --defaults-file="E:/program files/mysql/my-default.ini" ，和启动命令：
    net start mysql
    6.2在query1中，输入show databases; （点第一个黄色闪电执行命令）命令可以查看当前所有的数据库，新建一个数据库：
    create database doudizhu;   使用这个数据库：use doudizhu;   ，显示具体表： show tables;  (一个空表)  继续服务端代码
    6.3在query1中，执行use doudizhu ，再创建相应的玩家表，执行 ：
    create table t_account(unique_id varchar(255),account_id varchar(255),nick_name varchar(255),gold_count int(11),
    avatar_url varchar(255))ENGINE=InnoDB DEFULT CHARSET = utf8;
    执行show tables; 查看新建的表，再执行describe t_playerinfo; 查看表内具体项目   继续服务端代码
	6.4在webstorm中安装mysql的依赖包：执行 npm install mysql --save   在server目录下新建db.js 输入代码
	6.5在creator制作登陆界面：新建resource文件夹，并在其中建立ui文件夹，拖放背景图片wxlogin_0到resource文件夹，
	拖放微信登陆按钮图片到ui，拖放资源管理器中的背景图片和微信按钮图片到canvas下，调整微信按钮图片的位置，
	并为此添加UI组件-button，设置点击动画为缩放1.1倍，设置自定义数据为wxLogin，同时到客户端loginscene.js脚本中更新按钮
	6.6添加事件监听：在客户端script目录下新建data文件夹，并在其中新建socket-controller.js，同时在script目录下新建
	global.js和	defines.js,	更新代码，在doudizhu-client\assets\scripts\utility下新建event-listener.js ，新增代码，
	在loginScene.js里面更新相关代码；
	6.7添加数据库登陆代码：在服务端app.js文件中更新代码；在creator的scenes中新建hallScene场景，添加背景和创建房间和
	加入房间按钮，并添加相应的点击动画和脚本，在客户端添加hallScene\hallScene.js文件，更新代码并绑定到两个按钮上；
    6.8玩家头像节点：准备一个头像背景框和背景图片，在canvas下新建playerNode空节点，把素材都拖放到该节点下，调整各图片属性
    注意设置昵称、id、金币数量的label的锚点为0，使得数据从左到右出现,之后在hallScene.js中添加几个playernode的属性并绑定。
    在player-data.js和中更新代码
    6.9玩家实例：在服务端新建game/game-controller.js、player.js/room.js文件，更新代码;客户端新建hallScene场景文件并新建
    scripts\hallScene\hallScene.js文件，更新代码，并在game-controller、game-controller、app.js中新增待相关代码，
7.游戏房间ui设置：在客户端中导入一张新的背景图片create_room和四个房间创建按钮图片，均匀分布，再加一个关闭的按钮（添加一个自适应的组件：
    UI-widget组件，勾选left和top），给背景图片create_room添加一个按钮组件用于屏蔽其他按钮，将create_room制作成预置件；
    7.1在客户端scripts\hallScene\prefabs下新建createRoom.js，绑定createRoom.js到create_room预置件，再更新代码，
    给关闭按钮添加一个点击事件，createRoom节点和自定义数据close，
    7.2给每个房间创建按钮图片下创建一个label渲染组件，分别为1倍到4倍，并设置按钮点击事件：自定义数据为rate_1 ~ rate_4 ，
    更新createRoom.js代码，并在hallScene场景中绑定createRoom，
    7.3加入房间：导入相关图片资源并调整好，在客户端scripts\hallScene\prefabs中新建joinRoom.js，更新代码，
    将joinRoom制作成预置件，分别给每个按钮绑定joinRoom.js脚本并设置其自定义数据，清除设置为qingchu，后退设置为houtui；
    新建一个空节点LabelNode，并在其中新建6个文字label用于显示房号，更改颜色为红色调整文字大小并调整位置，更新joinRoom.js
    代码，并设置属性 LabelNode : cc.Node,  再次更新joinRoom.js代码；
    7.4加入房间服务器：更新代码：joinRoom.js game-controller.js player.js socket-controller.js
    7.5显示规则：客户端新建gameScene场景，在脚本目录中新建gameScene\gameScene.js ，打开gameScene场景调整分辨率，
    导入背景图片，新建一个空节点Labels，在其中新建roomidLabel、bottomLabel、rateLabel，更新gameScene.js代码，
    7.6座位排序规则：在gameScene场景canvas下新建playernode空节点，拖入一张背景图和玩家头像图片，新建空节点headimage、
    新建文字节点nicknameLabel、idLabel、goldLabel，并保存为playernode预制件，在scripts/gameScene/prefabs下新建
    playernode.js脚本，更新代码，再更新gameScene、room代码，新建playerPosNode空节点，在playerPosNode节点下新建3个空节点，
    并重命名为node1~3再拖放到合适位置，更新gameScene代码,
    7.7玩家准备：更新player、gameScene、room代码，将准备和离线图片拖放到客户端ui文件夹，再拖放到playerNode预制件，
    更新playernode代码并绑定节点；在gamescene场景中canvas下新建gameBeforUI空节点，将准备和开始按钮图片拖放至gameBeforUI
    空节点，在gameScene下新建gameBeforUI.js脚本，更新代码,给准备按钮添加按钮点击事件：拖放canvas、gameBeforUI、onbuttonclick，
    绑定gameBeforUI.js脚本到gameScene的canvas上，再绑定准备和开始节点，更新socket-controller.js、gameBeforUI.js脚本代码，
    再给开始按钮添加按钮点击事件：拖放canvas、gameBeforUI、onbuttonclick，更新player、gameScene、room代码，
    切换房主的操作隐含在更新socket-controller.js、gameBeforUI.js、room.js脚本代码中了
    7.8房间状态机：更新room代码;修复开始游戏后玩家头像上的准备标示：更新gameScene、playernode、room代码；
8.发牌系统：在服务端game目录下新建card.js、carder.js脚本，更新代码，再更新room、player、socket-controller代码,
    8.1在客户端gamescene中新建一个空节点gameingUI，并在gameScene目录下新建gameingUI.js脚本，绑定并更新gameingUI脚本，
    将客户端中的gameingUI节点绑定到canvas属性的gameingUI脚本属性中的gameingUI节点，在gameingUI空节点下新建card空节点，
    将card.png、card.plist拖放到客户端资源目录中，在客户端新建gameScene/Prefab/card.js脚本并绑定到card空节点的属性，
    拖放card为预制件并在层级管理器中删除该节点，更新Prefab/card.js脚本代码,拖放card.plist到card预制件的cardsSpriteAtlas属性中，
    在card预制件的属性中添加Sprite组件，拖放card.plist中的card_55到Sprite组件的Sprite Frame属性中，更新Prefabs/card.js代码,
    更新Prefabs/card.js、game/card.js、gameingUI.js、carder.js 代码，把洗牌后的牌分配到玩家手里；
    8.2将服务端发来的牌组信息在客户端显示出来：更新Prefabs/card.js代码，更新Prefabs/card.js、game/card.js、gameingUI.js、carder.js 代码,
    再将客户端显示的牌组重新排序：更新gameingUI.js代码，
    8.3在其他玩家头像附近显示牌的背面：在player_node节点中新建cardNode空节点并摆放到合适位置，再设置为隐藏状态，
    更新player_node代码，再将cardnode节点绑定到player_node属性，在更新player_node代码,再绑定card预制件到player_node属性，
    再更新player_node、gameScene代码,三张底牌操作：更新gameingUI.js代码
    8.4抢地主操作：在客户端层级管理器中gameingUI下新建robUI空节点，导入相关图片到客户端资源目录，调整robUI的位置以及相关
    资源的位置，再在gameingUI下新建label节点用于显示倒计时，调整一下位置，更新gameingUI.js代码，给抢和不抢图片添加相应的
    点击事件，更新socket-controller.js和gameingUI.js代码，以完成对服务端告知玩家抢与不抢的通知，
    8.5轮番下发抢地主的消息：更新gameingUI.js、socket-controller、player_node、gameScene代码，在player_node预制件下，
    新建infoNode空节点并设置隐藏，在infoNode下新建label节点tipslabel：正在抢地主，拖放clock资源到infoNode下，
    调整clock和tipslabel的位置，再在clock下新建timelabel，绑定相关资源到player_node属性，更新player_node代码，
    更新gameingUI.js、socket-controller、player_node、gameScene代码；
    8.6处理抢地主的细节：更新gameingUI、player_node代码，拖放 抢 与 不抢 的图片到客户端ui文件夹下，在player_node预制件下
    新建精灵robIconSP并调整位置且隐藏，绑定robIconSP、抢 与 不抢 的图片到player_node属性，更新gameScene、player_node、
    socket-controller代码,robIconSP精灵属性中的 SpriteFrame ,点红叉取消掉
    8.7确定地主：更新gameScene、player_node、player、room、socket-controller代码,导入代表地主标识的资源masterIcon到
    客户端并调整位置，绑定masterIcon到player_node属性并设置隐藏，更新player_node代码,
    8.8把三张底牌加给地主：更新gameingUI、gameScene、player_node、room代码，在客户端中调整三个玩家的位置和牌的位置，
9出牌操作：在客户端gamescene中新建一个playUI空节点，再拖动按钮图片nopush到他下面，更改该图片的type属性为sliced，
    添加按钮事件，在noPushCardButton下新建label节点“不出”，同理操作PushCardButton和tipButton，修改默认的label值，
    再导入时钟资源并新建label节点“9”，再设置playUI节点为隐藏，更新gameUI脚本并绑定到gamescene的canvas上，
    9.1服务端轮流下发出牌逻辑：更新gameingUI、room、player，prefabs/card、socket-controller脚本；
    9.2重新排序地主牌,点击牌：更新gameingUI、prefabs/card脚本；
    9.3选中牌再出牌：更新socket-controller、gameingUI脚本，客户端新建一个tipsLabel绑定到canvas属性，
    更新carder、room、player、socket-controller脚本，
    9.4出牌及牌型判断和对比：更新carder、room脚本,客户端中    ==忘记做笔记了==
    9.5修复ui小细节，更新减少手牌功能：更新prefabs/card、playernode、gameingUI.player脚本，


[db-task][sync-changes] uuid collision, the uuid for E:\program files\CocosCreator\resources\static\default-assets\prefab\toggleGroup.prefab is already in used by E:\program files\CocosCreator\resources\static\default-assets\prefab\toggleContainer.prefab. Assigning a new uuid.

[db-task][sync-changes] uuid collision, the uuid for E:\program files\CocosCreator\resources\static\default-assets\prefab\toggleGroup.prefab
is already in used by E:\program files\CocosCreator\resources\static\default-assets\prefab\toggleContainer.prefab. Assigning a new uuid.

